"use client";

import React from 'react';
import { twMerge } from "tailwind-merge";
import { TAnlaysisCode } from "@/types/my-library/vulnerability-analysis";
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';
import { vscDarkPlus } from 'react-syntax-highlighter/dist/esm/styles/prism';

// 파일 분석을 위한 Prop 타입 정의
type TFileAnalyzeProps = {
  code?: string | null;
  language?: string;
} & React.ComponentProps<"div">;

type PropTypes = TAnlaysisCode & {
  className?: string;
  children?: React.ReactNode;
  onClose?: () => void;
} & TFileAnalyzeProps;

// 분석 중일 때 상태를 보여주는 컴포넌트
const AnalyzingState: React.FC<{ code: string; language: string }> = ({ code, language }) => {
  return (
    <SyntaxHighlighter 
      language={language} 
      style={vscDarkPlus}
      customStyle={{
        margin: 0,
        padding: '20px',
        fontSize: '14px',
        lineHeight: '1.5',
        backgroundColor: 'transparent',
      }}
      showLineNumbers={true}
      wrapLines={true}
    >
      {code}
    </SyntaxHighlighter>
  );
};

// 파일이 선택되지 않았을 때 보여주는 대기 상태 컴포넌트
const WaitState: React.FC = () => {
  return (
    <div className="flex h-full w-full flex-col items-center justify-center gap-8">
      <p className="text-[32px] font-medium text-primary-500">파일을 선택하세요</p>
    </div>
  );
};

// 코드 분석을 위한 메인 컴포넌트
const VulnerabilityAnalysisCode: React.FC<PropTypes> = ({
  className,
  status = "",
  onClose = () => {},
  children,
  code,
  language = 'javascript',
}) => {
  return (
    <div className={twMerge(
      "h-[1100px] w-[1484px] overflow-y-auto rounded-xl border border-line-default p-10",
      className,
    )}>
      {code ? <AnalyzingState code={code} language={language} /> : <WaitState />}
    </div>
  );
};

export default VulnerabilityAnalysisCode;